=begin pod

=TITLE Alternative Documentation System

=SUBTITLE Creates a Collection of POD6 sources, default starts a local web-site powered by Cro.

=DESCRIPTION Collects POD6 sources existing in github repo for the
Documentation, creates output
suitable for a running with Cro, or for an epub or pdf. The module depends on C<Raku::Pod::Render>.

=AUTHOR Richard Hainsworth, aka finanalyst

=LICENSE Artist 2.0

This Module provides a local website available via a browser at localhost:3000 of the Raku documentation.
The Module uses Collection and Raku::Pod::Render to link all the Pod6 files together. The Cro app and HTML
output files are created using the Website mode, but other modes can be created.

=head1 Installation

    zef install Raku-Alternative-Distribution

This installs the C<Cro> and C<Raku::Pod::Render> dependencies and the C<Raku-Docs> executable.

=head1 Raku-Doc

The following are for Linux based distributions. Raku-Doc depends on C<git> and C<unrar>, which typically are
installed on Linux distributions, to get and unpack other files.

Under Linux, in a terminal, the following will lead to the installation of a local copy of Raku docs and start a
Cro app that will make the HTML documentation available in a browser at C<localhost:3000>

    mkdir ~/Raku-Alternative-Documentation
    cd Raku-Alternative-Documentation
    Raku-Doc

Calling C<Raku-Doc> without any other options implies the mode B<Website> with default options, see below.

In order to have more control, the process can be run in stages. For example

    Raku-Doc Init

will run the Init stage only, see below L<for more detail|Init>.

After the Init stage, options can be set within the C<config.raku> file, which is a valid B<Raku> program that evaluates to a Hash, or the
B<Website> config files.

The next stage is Refresh, which implies Init. Calling without commands implies Refresh.

If C<Raku-Doc> is called with a string other than 'Init', 'Refresh', or 'Website', then the string is interpreted as another B<Mode>,
with its own sub-directory and configuration for the collection. For example,

    Raku-Doc Book

would create the collection output defined by the B<Configuration> in the directory C<Book/config/>. This design
is to allow for the creation of different Collection outputs to be defined for the same content files.

=head2 Init

Init must be run from inside the root directory of the collection, which must be empty. A non-empty directory
indicates an error, so C<Raku-Doc Init> will fail in any directory with contents. The directory can be placed anywhere.

After B<Init>, Raku-Doc has created a C<config.raku> file in the distribution
root directory, cloned a sub-directory C<raku-docs> from the documantation repository, and unpacked a sub-directory 'Website'
with is own configuration files in C<Website/config/>, templates in C<Website/templates/>, and B<Raku::Render::Pod> pluging
in C<Website/plugins>.

Initialisation only happens once. Updates to the Collection are handled in other steps.

=head2 Refresh with option C<--no-status>

This step only changes the cache status of the Collection. After initialisation, updates to the content files can be
pulled from an external source, and the cache is refreshed.

The step may take some considerable time the first time C<Raku-Docs> is run, so a progress bar is shown.

If no progress bar is needed, specify C<--no-status>.

The C<no-status> option can be specified on the command line or in the Collection's config file. The run-time option
takes preference.
Three state possibilities exist for the source files:
=item some source files have changed, and the cache needs to be updated only for changed files, with changes passed for rendering.
This is the B<default> activity.

=item the whole cache needs to be renewed (rare synchronisation issues). For this activity C<--recompile> should be set.
=item no changes should be allowed to the source files collection. To enforce this, C<--no-refresh> should be set.

A mode call can be run with options C<--no-refresh> or C<--recompile>, which are specified in the mode's configuration.

A mode call will update the source files, and if they are changed, then the output files, which for Website are HTML files,
will be updated too.

=head2 Implicit mode, Website or Explicit mode

When C<Raku-Doc> is run without a command, the implicit mode is B<Website>. Any string other than Init or Refresh is a mode, see below.

During this stage, the output files are generated and control is transferred to a callable, such as a Cro app.

As is the case with the source files, the output files may have three states
=item Some output files need to be regenerated to mirror changes in the source files, the B<default> action.
=item All of the output files need to be regenerated due to template or plugin changes, set C<--full-render> for this action.
=itemm None of the output files should be regeneraed, set C<--no-rerender>

The Cro app is started and makes the documentation available at C<localhost:3000>

=head1 Distribution Structure

A distribution contains content files, which may be updated on a regular basis, a cache,
templates, and one or more modes.

=head2 Content

The content of the distribution is contained in B<POD6> files. In addition to the source files, there are
Collection content files which express things like the Table of Contents for the whole collection.

Collection content are held separately to the source content, so that each mode may have different pages.

This allows for active search pages for a Website, not needed for an epub, or publisher data for an output
formation that will be printed.

=head2 Cache

The B<cache> is a Precomp structure into which the content files are pre-preprocessed.

=head2 Mode

The B<Mode> is the collection of templates and configuration for some output.

The default Mode is B<Website>. This is over-ridden by the string argument following C<Raku-Doc>, so long as it is not
B<Init> or B<Refresh>.

The string must refer to an immediate directory of the root of the collection,
so it is compared to C</ ^ \W+ (\w+) '/'? .* $ /> and
only the inner C<\w> chars are used.

The templates, configuration, output files, and other assets used by a Mode are associated with the Mode, and should
reside beneath the Mode sub-directory.

Plugins that are used to enhance the C<PodRender> object should also reside beneath the Mode sub-directory.

=head2 Templates

The B<templates>, which may be any format (currently RakuClosure or Mustache) accepted by
C<Raku::Pod::Render>, define how the following are expressed in the output:
=item the elements of the content files, eg. paragraphs, headers
=item the files as entities, eg, whether as single files, or chapters of a book
=item the collective components of content files, viz, Table of Contents, footnotes, Glossary, Meta data
=item All the templates may be in one file, or distributed between files.
=item2 If there are no templates in the directory, the default files in C<Raku::Pod::Render> are used.
=item2 If there are multiple files in the directory, they will all be evaluated in alphanumeric order.
Note that existing keys will be over-written if they exist in later templates.

=head Configuration

A default B<Configuration> comes with the distribution and is located at C<$?CWD/Website/config/01-config.raku>,
because Website is created at initialisation.

The following rules apply:
=item If the B<config> directory does not exist or is empty, B<Raku-Doc> will fail.
=item The Configuration consists of one or more C<Raku> files that evaluate to a hash.
=item2 Each Config file in the B<Config> directory will be evaluated in alphabetical order.
=item2 Configuration keys may not be over-written. An C<Collection::Config> exception will be thrown if a key exists.

The configuration defines at a minimum the following locations, relative to the root of the B<Mode>,
assumed to be C<$?CWD/$mode/>, where C<$mode> is the String command following Raku-Doc, or 'Website':
=item the B<cache>
=item2 default: '../cache',
=item the B<templates>
=item2 default: 'templates',
=item the B<content files>
=item2 default: 'sources'
=item the implied extension for POD6 files
=item2 default: 'pod6'
=item3 pod6 may exist in other extensions, but a bare name implies this extension
=item the path to the Cro app
=item2 default: 'app'
=item the output
=item2 default: 'app/html'
=item the port number for localhost in the browser
=item2 default: 3000

The default options for Raku-Doc can be set in the Website configuration, but are ignored otherwise. They are:
=item no-gui = False
=item no-status = False
=item recompile = False
=item no-refresh = False
=item recompile = False

Each Mode will have a number of other configuration parameters. For a Website:
=item the file that is the root
=item2 default: 'index' (given the implied extension, this refers to the file index.pod6)

=head1 File dependencies

Some content files require data generated by other content files. For example, a content file that outputs
a Table of Contents for all the other content files requires that all those files have previously been
processed.

Further, when a content file is changed, its HTML output will need to be generated and B<also>
the collection's Table of Contents will also need to be regenerated.

This is done by specifying a list of pairs in a hash with key 'order' in the Configuration.

In the absence of the 'order' key in the Configuration, no content file with have a dependent.

Since all files in the config directory are evaluated. the order can be specified in a separate file which
has a single key. Foe example, C<config/01-order.raku> which contains:

=begin code
%( 'order' => %(
    index => / 'source/' * /,
    toc => / 'index' /,
    glossary => / 'index' /,
    search => / 'glossary' | 'toc' /,
    )
)
=end code

This order specifies that 'index.pod6' is processed if any other file matching the regex is re-generated, 'toc.pod5' and
'glossary.pod6' are regenerated if 'index' is regenated, and 'search' if either of 'toc' or 'glossary'
are regenerated.

=end pod